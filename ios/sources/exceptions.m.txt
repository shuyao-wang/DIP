#import <Foundation/Foundation.h>
#include <execinfo.h>

NSString * const UncaughtExceptionHandlerSignalExceptionName = @"UncaughtExceptionHandlerSignalExceptionName";
NSString * const UncaughtExceptionHandlerSignalKey = @"UncaughtExceptionHandlerSignalKey";
NSString * const UncaughtExceptionHandlerAddressesKey = @"UncaughtExceptionHandlerAddressesKey";

volatile int32_t UncaughtExceptionCount = 0;
const int32_t UncaughtExceptionMaximum = 10;

const NSInteger UncaughtExceptionHandlerSkipAddressCount = 0;
const NSInteger UncaughtExceptionHandlerReportAddressCount = 10;

NSArray * getBacktrace() {
	void * callstack[128];
	int frames = backtrace(callstack, 128);
	char ** strs = backtrace_symbols(callstack, frames);

	int i;
	NSMutableArray *backtrace = [NSMutableArray arrayWithCapacity:frames];
	for (
		i = UncaughtExceptionHandlerSkipAddressCount;
		i < UncaughtExceptionHandlerSkipAddressCount +
			UncaughtExceptionHandlerReportAddressCount;
		i++)
		{
			if (strs[i]) {
				[backtrace addObject:@(strs[i])];
			} else {
				break;
			}
		}
	free(strs);

	return backtrace;
}

void HandleException(NSException *exception) {
	NSSetUncaughtExceptionHandler(NULL);

	NSArray * callStack = getBacktrace();
	NSLog(@"\nException %@\nbacktrace %@", exception, callStack);

	[exception raise];
}

void SignalHandler(int signum) {
	signal(SIGABRT, SIG_DFL);
	signal(SIGILL, SIG_DFL);
	signal(SIGSEGV, SIG_DFL);
	signal(SIGFPE, SIG_DFL);
	signal(SIGBUS, SIG_DFL);
	signal(SIGPIPE, SIG_DFL);

	NSArray * callStack = getBacktrace();
	NSLog(@"\nSignal %d\nbacktrace %@", signum, callStack);

	kill(getpid(), signum);
}

__attribute__((constructor))
static void ctor() {
	NSSetUncaughtExceptionHandler(&HandleException);
	signal(SIGABRT, SignalHandler);
	signal(SIGILL, SignalHandler);
	signal(SIGSEGV, SignalHandler);
	signal(SIGFPE, SignalHandler);
	signal(SIGBUS, SignalHandler);
	signal(SIGPIPE, SignalHandler);
}
